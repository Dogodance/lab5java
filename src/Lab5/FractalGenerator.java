package Lab5;
import java.awt.geom.Rectangle2D;


/**
 * Абстрактный класс описывает операции для реализации "создателя" фракталов
 * Класс сделан абстрактным специально, чтобы нельзя было создать его объекты
 */
public abstract class FractalGenerator {

    /**
     * Воспомогательный статичный метод для взятия координат и конвертирования
     * их в значение с двойной точностью входящее в определенный диапозон, заданный
     * в конструктуре. Используется для конвертирования целочисленных координат пикселей
     * в число с двойной точностью
     * @param rangeMin ограничение по минимуму для дробного диапозона the minimum value of the floating-point range
     * @param rangeMax ограничение по максимуму для дробного диапозона
     *
     * @param size размер пространства, откуда берутся координаты. Это либо ширина, либо высота
     *
     * @param coord кооордината для который, вычисляется значение двойной точности. Координата
     *              находится в диапозоне [0, size]
     */
    public static double getCoord(double rangeMin, double rangeMax,
                                  int size, int coord) {
        // assert - это утверждение с помощью которого мы преостанавливаем код если выражение не True
        // assert прокидывает свой собственный класс ошибок AssertionError
        assert size > 0; // Выполняется метода если размер - положительное число
        assert coord >= 0 && coord < size; // Метод выполняется - если координата находится в допустимом диапозоне

        double range = rangeMax - rangeMin; // Определим диапозон как разницу между ограничителем минимума и максимума
        return rangeMin + (range * (double) coord / (double) size); // конвертирурем значение в число с плавающей запятой
    }


    /**
     * Абстрактный метод, который должен быть реализован в наследниках, и позволяет установить диапозон отрисовки
     */
    public abstract void getInitialRange(Rectangle2D.Double range);


    /**
     * Метод обновляет диапозон отрисовки и центрируется в указанных координатах
     * После этого происходит увеличение отрисовки с учетом скалирующего фактора
     */
    public void recenterAndZoomRange(Rectangle2D.Double range,
                                     double centerX, double centerY, double scale) {
        // Определение новой ширины с учетом масштаба
        double newWidth = range.width * scale;
        // Определение новой высоты с учетом масштаба
        double newHeight = range.height * scale;
        // x - устанавливается как новое значение, предыдущего значения x смещенного с учетом новой ширины
        range.x = centerX - newWidth / 2;
        // y - установливается как новое значение, предыдущего значения y смещенного с учетом новой высоты
        range.y = centerY - newHeight / 2;
        // Установка ограничение по новой ширине
        range.width = newWidth;
        // Установка ограничений по новой высоте
        range.height = newHeight;
    }


    /**
     * абстрактный метод, который должен реалезоваться в конкретных наследниках
     * получает параметрами x и y на комплексной плоскости, вычисляет и возвращает
     * количество итераций до того как функция фрактала выходит за пределы ограничивающей
     * области для этой точки. Точка, которая не исчезает после прохода лимита итераций
     * указывается со значением - 1.
     */
    public abstract int numIterations(double x, double y);
}
